Index: backend/src/api/endpoints/commands.rs
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>use anyhow::Result;\nuse chrono::{NaiveDate, Weekday};\nuse rocket::Rocket;\nuse rocket_contrib::json::Json;\nuse rocket_contrib::uuid::Uuid as RocketUuid;\nuse std::collections::HashMap;\nuse uuid::Uuid;\n\nuse crate::analysis::summary;\nuse crate::crud::notes;\nuse crate::crud::users;\nuse crate::db::guard::DbConn;\nuse crate::models::notes::Note;\nuse crate::models::users::User;\nuse crate::schemas::notes::{NoteCreate, NoteUpdate};\nuse crate::schemas::users::{UserCreate, UserUpdate};\n\n//Api commands for notes\n\n#[post(\"/\", format = \"json\", data = \"<obj_in>\")]\nfn create(obj_in: Json<NoteCreate>, db: DbConn) -> Result<Json<Note>> {\n    let inserted_note = notes::create(&db, obj_in.0)?;\n    Ok(Json(inserted_note))\n}\n\n#[get(\"/<obj_id>\")]\nfn read(obj_id: RocketUuid, db: DbConn) -> Result<Json<Note>> {\n    let uuid = Uuid::from_bytes(*obj_id.as_bytes());\n    let found_note = notes::find(&db, uuid)?;\n    Ok(Json(found_note))\n}\n\n#[patch(\"/\", format = \"json\", data = \"<obj_in>\")]\nfn update(obj_in: Json<NoteUpdate>, db: DbConn) -> Result<Json<Note>> {\n    let updated_note = notes::update(&db, &obj_in.0)?;\n    Ok(Json(updated_note))\n}\n\n#[delete(\"/<obj_id>\")]\nfn delete(obj_id: RocketUuid, db: DbConn) -> Result<Json<Note>> {\n    let uuid = Uuid::from_bytes(*obj_id.as_bytes());\n    let deleted_note = notes::delete(&db, uuid)?;\n    Ok(Json(deleted_note))\n}\n\n\n//Api commands for users\n\n#[post(\"/\", format = \"json\", data = \"<obj_in>\")]\nfn create_user(obj_in: Json<UserCreate>, db: DbConn) -> Result<Json<User>> {\n    let inserted_user = users::create(&db, obj_in.0)?;\n    Ok(Json(inserted_user))\n}\n\n#[get(\"/<obj_id>\")]\nfn read_user(obj_id: RocketUuid, db: DbConn) -> Result<Json<User>> {\n    let uuid = Uuid::from_bytes(*obj_id.as_bytes());\n    let found_user = users::find(&db, uuid)?;\n    Ok(Json(found_user))\n}\n\n#[patch(\"/\", format = \"json\", data = \"<obj_in>\")]\nfn update_user(obj_in: Json<UserUpdate>, db: DbConn) -> Result<Json<User>> {\n    let updated_user = users::update(&db, &obj_in.0)?;\n    Ok(Json(updated_user))\n}\n\n#[delete(\"/<obj_id>\")]\nfn delete_user(obj_id: RocketUuid, db: DbConn) -> Result<Json<User>> {\n    let uuid = Uuid::from_bytes(*obj_id.as_bytes());\n    let deleted_user = users::delete(&db, uuid)?;\n    Ok(Json(deleted_user))\n}\n\n\n//Api commands for analysis data\n\n// #[get(\"/obj_id\")]\n// fn aggregate(obj_id: RocketUuid, db: DbConn){\n//     let uuid = Uuid::from_bytes(*obj_id.as_bytes());\n//     // let found_note = notes::find(&db, uuid)?;\n//     let got_summary = aggregates::an alyse(&db, uuid);\n// }\n\n// #[get(\"/<obj_id>\")]\n// fn aggregatex(obj_id: RocketUuid, db: DbConn) -> Result<Json<Note>> {\n//     let uuid = Uuid::from_bytes(*obj_id.as_bytes());\n//     let found_note = aggregates::analyse(&db, uuid)?;\n//     // Ok(Json(found_note))\n// }\n\n// #[get(\"/<obj_id>/<affect_dimension>\")]\n// fn affect_aggregates(obj_id: String, affect_dimension: String, db: DbConn) -> Result<Json<HashMap<NaiveDate, i16>>> {\n//     // let uuid = Uuid::from_bytes(*obj_id.as_bytes());\n//     let affect_aggregates = summary::analyse(&db, obj_id, affect_dimension)?;\n//     Ok(Json(affect_aggregates))\n// }\n//\n#[get(\"/week_comparison/<obj_id>/<affect_dimension>\")]\nfn week_comparison(obj_id: String, affect_dimension: String, db: DbConn) -> Result<Json<HashMap<String, HashMap<NaiveDate, i16>>>> {\n    let affect = summary::long_term_affect_trend(&db, obj_id)?;\n    Ok(Json(affect))\n}\n\n\npub fn fuel(rocket: Rocket) -> Rocket {\n    rocket.mount(\"/api/users\", routes![create_user, read_user, update_user, delete_user])\n        .mount(\"/api/notes\", routes![create, read, update, delete])\n        .mount(\"/api/summary\", routes![week_comparison])\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/backend/src/api/endpoints/commands.rs b/backend/src/api/endpoints/commands.rs
--- a/backend/src/api/endpoints/commands.rs	
+++ b/backend/src/api/endpoints/commands.rs	
@@ -1,5 +1,7 @@
 use anyhow::Result;
-use chrono::{NaiveDate, Weekday};
+
+use chrono::{Datelike, Duration, NaiveDate, Utc, Weekday};
+
 use rocket::Rocket;
 use rocket_contrib::json::Json;
 use rocket_contrib::uuid::Uuid as RocketUuid;
@@ -75,11 +77,11 @@
 
 //Api commands for analysis data
 
-// #[get("/obj_id")]
+// #[get("/obj_id")]6
 // fn aggregate(obj_id: RocketUuid, db: DbConn){
 //     let uuid = Uuid::from_bytes(*obj_id.as_bytes());
 //     // let found_note = notes::find(&db, uuid)?;
-//     let got_summary = aggregates::an alyse(&db, uuid);
+//     let got_summary = summary::analyse(&db, uuid);
 // }
 
 // #[get("/<obj_id>")]
@@ -89,22 +91,22 @@
 //     // Ok(Json(found_note))
 // }
 
-// #[get("/<obj_id>/<affect_dimension>")]
-// fn affect_aggregates(obj_id: String, affect_dimension: String, db: DbConn) -> Result<Json<HashMap<NaiveDate, i16>>> {
-//     // let uuid = Uuid::from_bytes(*obj_id.as_bytes());
-//     let affect_aggregates = summary::analyse(&db, obj_id, affect_dimension)?;
-//     Ok(Json(affect_aggregates))
-// }
-//
-#[get("/week_comparison/<obj_id>/<affect_dimension>")]
-fn week_comparison(obj_id: String, affect_dimension: String, db: DbConn) -> Result<Json<HashMap<String, HashMap<NaiveDate, i16>>>> {
-    let affect = summary::long_term_affect_trend(&db, obj_id)?;
-    Ok(Json(affect))
+#[get("/<obj_id>/<affect_dimension>")]
+fn affect_aggregates(obj_id: String, affect_dimension: String, db: DbConn) -> Result<Json<HashMap<NaiveDate, i16>>> {
+    // let uuid = Uuid::from_bytes(*obj_id.as_bytes());
+    let affect_aggregates = summary::affect_aggregates(&db, obj_id, affect_dimension)?;
+    Ok(Json(affect_aggregates))
 }
+
+// #[get("/week_comparison/<obj_id>/<affect_dimension>")]
+// fn week_comparison(obj_id: String, affect_dimension: String, db: DbConn) -> Result<Json<HashMap<String, HashMap<NaiveDate, i16>>>> {
+//     let affect = summary::long_term_affect_trend(&db, obj_id)?;
+//     Ok(Json(affect))
+// }
 
 
 pub fn fuel(rocket: Rocket) -> Rocket {
     rocket.mount("/api/users", routes![create_user, read_user, update_user, delete_user])
         .mount("/api/notes", routes![create, read, update, delete])
-        .mount("/api/summary", routes![week_comparison])
+        .mount("/api/summary", routes![affect_aggregates])
 }
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"ChangeListManager\">\n    <list default=\"true\" id=\"b503a702-cd70-422f-9a50-c37caa588d2b\" name=\"Changes\" comment=\"trial add second data visualisation measure and proof of concept for nested data passing between front end and backend\">\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/backend/src/analysis/summary.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/backend/src/analysis/summary.rs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/backend/src/api/endpoints/commands.rs\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/backend/src/api/endpoints/commands.rs\" afterDir=\"false\" />\n      <change beforePath=\"$PROJECT_DIR$/frontend/my-app/src/summary/JournalSummary.js\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/frontend/my-app/src/summary/JournalSummary.js\" afterDir=\"false\" />\n    </list>\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\n  </component>\n  <component name=\"Git.Settings\">\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\n      <map>\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\n      </map>\n    </option>\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\n  </component>\n  <component name=\"GitSEFilterConfiguration\">\n    <file-type-list>\n      <filtered-out-file-type name=\"LOCAL_BRANCH\" />\n      <filtered-out-file-type name=\"REMOTE_BRANCH\" />\n      <filtered-out-file-type name=\"TAG\" />\n      <filtered-out-file-type name=\"COMMIT_BY_MESSAGE\" />\n    </file-type-list>\n  </component>\n  <component name=\"MacroExpansionManager\">\n    <option name=\"directoryName\" value=\"7gu2s1i9\" />\n  </component>\n  <component name=\"MarkdownSettingsMigration\">\n    <option name=\"stateVersion\" value=\"1\" />\n  </component>\n  <component name=\"ProjectId\" id=\"25Q1qh5gIPeN8i6JKqhQzm6kmov\" />\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\n  <component name=\"ProjectViewState\">\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\n    <option name=\"showLibraryContents\" value=\"true\" />\n  </component>\n  <component name=\"PropertiesComponent\">\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\n    <property name=\"com.intellij.ide.scratch.ScratchImplUtil$2/New Scratch File\" value=\"Rust&#10;HTML\" />\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$/../mindmee\" />\n    <property name=\"org.rust.cargo.project.model.PROJECT_DISCOVERY\" value=\"true\" />\n    <property name=\"org.rust.hideNoCargoProjectNotifications/home/tobiball/projects/capstone-project/backend/src/analysis/aggregates.rs\" value=\"true\" />\n    <property name=\"org.rust.hideNoCargoProjectNotifications/home/tobiball/projects/capstone-project/backend/src/analysis/summary.rs\" value=\"true\" />\n    <property name=\"org.rust.hideNoCargoProjectNotifications/home/tobiball/projects/capstone-project/backend/src/api/endpoints/commands.rs\" value=\"true\" />\n    <property name=\"org.rust.hideNoCargoProjectNotifications/home/tobiball/projects/capstone-project/backend/src/schemas/notes.rs\" value=\"true\" />\n    <property name=\"run.code.analysis.last.selected.profile\" value=\"pProject Default\" />\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.sourceCode.Rust\" />\n  </component>\n  <component name=\"RustProjectSettings\">\n    <option name=\"toolchainHomeDirectory\" value=\"$USER_HOME$/.cargo/bin\" />\n    <option name=\"version\" value=\"2\" />\n  </component>\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\n  <component name=\"TaskManager\">\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\n      <changelist id=\"b503a702-cd70-422f-9a50-c37caa588d2b\" name=\"Changes\" comment=\"\" />\n      <created>1645444689413</created>\n      <option name=\"number\" value=\"Default\" />\n      <option name=\"presentableId\" value=\"Default\" />\n      <updated>1645444689413</updated>\n    </task>\n    <task id=\"LOCAL-00001\" summary=\"-\">\n      <created>1648747028640</created>\n      <option name=\"number\" value=\"00001\" />\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1648747028640</updated>\n    </task>\n    <task id=\"LOCAL-00002\" summary=\"trial add second data visualisation measure and proof of concept for nested data passing between front end and backend\">\n      <created>1649144882191</created>\n      <option name=\"number\" value=\"00002\" />\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\n      <option name=\"project\" value=\"LOCAL\" />\n      <updated>1649144882191</updated>\n    </task>\n    <option name=\"localTasksCounter\" value=\"3\" />\n    <servers />\n  </component>\n  <component name=\"Vcs.Log.Tabs.Properties\">\n    <option name=\"TAB_STATES\">\n      <map>\n        <entry key=\"MAIN\">\n          <value>\n            <State>\n              <option name=\"FILTERS\">\n                <map>\n                  <entry key=\"branch\">\n                    <value>\n                      <list>\n                        <option value=\"second_visual_measure_and_summary_refactoring\" />\n                      </list>\n                    </value>\n                  </entry>\n                </map>\n              </option>\n            </State>\n          </value>\n        </entry>\n      </map>\n    </option>\n    <option name=\"RECENT_FILTERS\">\n      <map>\n        <entry key=\"Branch\">\n          <value>\n            <list>\n              <RecentGroup>\n                <option name=\"FILTER_VALUES\">\n                  <option value=\"main\" />\n                </option>\n              </RecentGroup>\n            </list>\n          </value>\n        </entry>\n      </map>\n    </option>\n  </component>\n  <component name=\"VcsManagerConfiguration\">\n    <option name=\"CHECK_CODE_CLEANUP_BEFORE_PROJECT_COMMIT\" value=\"true\" />\n    <ignored-roots>\n      <path value=\"$PROJECT_DIR$/frontend\" />\n      <path value=\"$PROJECT_DIR$/sandbox/capstone/capstone-project\" />\n    </ignored-roots>\n    <MESSAGE value=\"mvp_version\" />\n    <MESSAGE value=\"-\" />\n    <MESSAGE value=\"trial add second data visualisation measure and proof of concept for nested data passing between front end and backend\" />\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"trial add second data visualisation measure and proof of concept for nested data passing between front end and backend\" />\n    <option name=\"OPTIMIZE_IMPORTS_BEFORE_PROJECT_COMMIT\" value=\"true\" />\n    <option name=\"REFORMAT_BEFORE_PROJECT_COMMIT\" value=\"true\" />\n    <option name=\"REARRANGE_BEFORE_PROJECT_COMMIT\" value=\"true\" />\n  </component>\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\n    <expand />\n    <select />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	
+++ b/.idea/workspace.xml	
@@ -5,7 +5,6 @@
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/backend/src/analysis/summary.rs" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/analysis/summary.rs" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/backend/src/api/endpoints/commands.rs" beforeDir="false" afterPath="$PROJECT_DIR$/backend/src/api/endpoints/commands.rs" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/frontend/my-app/src/summary/JournalSummary.js" beforeDir="false" afterPath="$PROJECT_DIR$/frontend/my-app/src/summary/JournalSummary.js" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
